<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Reinforcement Learning on Scholarstree</title>
    <link>https://scholarstree.github.io/categories/reinforcement-learning/</link>
    <description>Recent content in Reinforcement Learning on Scholarstree</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Jun 2019 20:17:37 +0530</lastBuildDate><atom:link href="https://scholarstree.github.io/categories/reinforcement-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Training Policy Gradients</title>
      <link>https://scholarstree.github.io/posts/2019-06-05-training-policy-gradients/2019-06-05-training-policy-gradients/</link>
      <pubDate>Wed, 05 Jun 2019 20:17:37 +0530</pubDate>
      
      <guid>https://scholarstree.github.io/posts/2019-06-05-training-policy-gradients/2019-06-05-training-policy-gradients/</guid>
      <description>This post focuses on results of variance reduction techniques viz. batch sizes, reward-to-go, discounted returns, baselines and advantage normalization for policy gradient algorithms on CartPole-v0 environment.</description>
      <content:encoded><![CDATA[<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/policy_gradients_title.png#center"
         alt="title"/> 
</figure>

<hr>
<h3 id="__notations__"><strong>Notations</strong></h3>
<table>
<thead>
<tr>
<th>Symbol</th>
<th style="text-align:left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>$s_t$</td>
<td style="text-align:left">state at timestep $t$</td>
</tr>
<tr>
<td>$a_t$</td>
<td style="text-align:left">action taken in state $s_t$</td>
</tr>
<tr>
<td>$r(a_t \vert s_t)$</td>
<td style="text-align:left">reward after taking action $a_t$ in state $s_t$</td>
</tr>
<tr>
<td>$\tau$</td>
<td style="text-align:left">a trajectory, $(s_0, a_0, r_0, s_1, a_1, r_1, \ldots, s_{T-1}, a_{T-1}, r_{T-1}, s_T)$</td>
</tr>
<tr>
<td>$r(\tau)$</td>
<td style="text-align:left">$\sum_{t}r(a_{t}, s_{t})$</td>
</tr>
<tr>
<td>$\pi_\theta(\tau)$</td>
<td style="text-align:left">probability of tajectory $\tau$ under policy $\pi_\theta$ with parameters $\theta$</td>
</tr>
<tr>
<td>$\gamma$</td>
<td style="text-align:left">discount factor</td>
</tr>
</tbody>
</table>
<h3 id="__theory__"><strong>Theory</strong></h3>
<p>Policy gradient methods try to solve reinforcement learning problems by modelling the policy as a parameterized function, generally a neural network. The policy network takes in observations as inputs and returns a distribution over available actions as output. An action from this distribution is sampled and a reward is received after the action is taken. The goal of policy gradient methods is to maximize (or minimize the negative of) an objective function which depends on the actions taken and rewards received over multiple timesteps. Our objective function, $J(Î¸)$ is the expectation of returns over all trajectories under policy $\pi_\theta$. We find the gradient of the objective functions w.r.t. the parameters of policy network and make updates.</p>
<p>$$J(\theta) = \mathbb{E}_{\tau \sim \pi {\theta}(\tau)  \bigg[ \sum_tr(a_t, s_t) \bigg] \tag{1}\label{eq:1}}$$</p>
<p>where,</p>
<p>$$
\begin{align}
\pi_\theta(\tau) &amp;= p(s_1)\sum_{t=1}^{T} \pi_\theta(a_t \vert s_t)p(s_{t+1} \vert s_t, a_T) \newline
\log \pi_\theta(\tau) &amp;= \log p(s_1) + \sum_{t=1}^{T} \log\pi_\theta(a_t \vert s_t) + \log p(s_{t+1} \vert s_t, a_T)
\end{align}
$$</p>
<p>The gradient of $J(\theta)$ has the following form.</p>
<p>$$
= \mathbb{E}<em>{\tau \sim \pi {\theta}(\tau)} \bigg[ \bigg( \sum</em>{t=1}^{T} \nabla_\theta\log\pi_\theta(a_t \vert s_t) \bigg) \sum_{t}r(a_{t}, s_{t}) \bigg]\tag{2}\label{eq:2}
$$</p>
<!-- $$
\begin{align}
    \nabla_\theta J(\theta)  &= \int \nabla_\theta \pi_\theta(\tau)r(\tau)d(\tau) 
  \\ &= \int \pi_\theta(\tau) \nabla_\theta \log\pi_\theta(\tau)r(\tau)d(\tau)
  \\ &= \mathbb{E}_{\tau \sim \pi_{\theta}(\tau)} \big[ \nabla_\theta \log\pi_\theta(\tau)r(\tau) \big]
  \\ &= \mathbb{E}_{\tau \sim \pi_{\theta}(\tau)} \bigg[ \bigg(\sum_{t=1}^{T} \nabla_\theta\log\pi_\theta(a_t \vert s_t)\bigg) r(\tau) \bigg]
  \\ &= \mathbb{E}_{\tau \sim \pi_{\theta}(\tau)} \bigg[ \bigg( \sum_{t=1}^{T} \nabla_\theta\log\pi_\theta(a_t \vert s_t) \bigg) \sum_{t}r(a_{t}, s_{t}) \bigg]\tag{2}\label{eq:2}
\end{align}
$$ -->
<p>Computing this expectation under a distribution over all trajectories is intractable, so we use sampling instead to make an approximation.</p>
<p>$$\nabla_\theta J(\theta) \approx \frac {1}{N} \sum_{i=1}^{N} \bigg[ \bigg( \sum_{t=1}^{T} \log\pi_\theta(a_t \vert s_t) \bigg) \sum_{t}r(a_{t}, s_{t}) \bigg]\tag{3}\label{eq:3}$$</p>
<p>A simple policy gradient algorithm repeats the following steps:</p>
<ol>
<li>Sample $\tau^{i}$ from $\pi_\theta(a_t \vert s_t)$</li>
<li>Compute $\nabla_\theta J(\theta) \approx \frac {1}{N} \sum_{i} \big( ( \sum_{t} \nabla_\theta\log\pi_\theta(a_t \vert s_t) ) \sum_{t=1}^{T}r(a_{it}, s_{it}) \big)$</li>
<li>Update $\theta \leftarrow \theta + \alpha \nabla_\theta J(\theta)$</li>
</ol>
<p>This simple algorithm is prone to variance. While training policy gradients, there are certain methods used to reduce such variance. These methods usually make small changes in the objective function. In the following sections, the effects of these methods is demonstrated on CartPole-v0 environment.</p>
<p><strong>Practical consideration:</strong> Computing $\nabla_\theta\log\pi_\theta(a_t \vert s_t)$ explicitly is inefficient. We instead compute
$$\tilde{J}(\theta) \approx \frac {1}{N} \sum_{i=1}^{N} \bigg[ \bigg( \sum_{t=1}^{T} \log\pi_\theta(a_t \vert s_t) \bigg) \sum_{t}r(a_{t}, s_{t}) \bigg]\tag{4}\label{eq:4}$$
and use automatic differentiation to compute policy gradients.</p>
<h3 id="__cartpole-v0__"><strong>CartPole-v0</strong></h3>
<p><a href="https://github.com/openai/gym/wiki/CartPole-v0">CartPole-v0</a> is an OpenAI gym environment where a pole is attached to a cart. The cart can move along a frictionless track. The goal is to prevent the pole from falling.  CartPole-v0 observations are arrays of 4 values - cart position, cart velocity, pole angle and pole velocity at the top. The action is a discrete value - 0 (push cart to the left) or 1 (push cart to the right). The top limit on the number of steps that can occur in one episode is 200. There is another version, CartPole-v1 with 500 steps as max limit but experiments in this article will be based on CartPole-v0.</p>
<h3 id="__experiment-details__"><strong>Experiment details</strong></h3>
<ul>
<li><strong>Policy network:</strong> inputs of dimensions (batch size, 4); 2 hidden layers of size 64 each; output dimensions of (batch size, 2); learning rate of 0.001 with Adam optimizer</li>
<li><strong>Baseline network:</strong> input of dimensions (batch size, 4); 2 hidden layers of size 64 each; output dimensions of (batch size, 1); learning rate of 0.001 with Adam optimizer</li>
<li><strong>Discount factor:</strong> 0.99</li>
<li><strong>Random seeds:</strong> All experiments are performed thrice with numpy, pytorch and gym seeds as 0, 10 and 20. Results are averaged.</li>
<li><strong>Number of iterations:</strong> 1000. One iteration means using a batch to make one policy update.</li>
<li><strong>Plots:</strong> Average of returns in a batch vs iterations.</li>
</ul>
<h4 id="__batch-size__"><strong>Batch size</strong></h4>
<p>Batch size refers to the number of timesteps used to make an update to policy network. When only a single timestep is used, the algorithm is called REINFORCE. Here, comparison is done between three batch sizes:</p>
<ol>
<li>At least 1. Only a single episode is run.</li>
<li>At least 500. Episodes are run until we get 500 timesteps.</li>
<li>At least 1000. Episodes are run until we get 1000 timesteps.</li>
</ol>
<p>It is possible that we receive required minimum timesteps (1, 500 or 1000) in the middle of an episode but we still run the episode till the end and use all the timesteps from that episode in the batch. This leads us to having some extra timsteps in our batch. If we stop the episode in the middle, then the returns we get will be lower than actual returns. Now, let&rsquo;s run our algorithm to maximize \eqref{eq:4}.</p>
<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/2l_64s_1b_0na_0rtg_0nnb_0.99g_0.001lr.jpg#center"
         alt="2l_64s_1b_0na_0rtg_0nnb_0.99g_0.001lr"/> <figcaption>
            <p><em>Policy update using at least 1 timestep.</em></p>
        </figcaption>
</figure>

<p>We can see that average returns of the batches are not consistent and have a lot of variance. Also, notice that the results are sensitive to random seeds as well. On increasing the batch size to 500, we get a considerable reduction in variance and also, a faster increase in average returns.</p>
<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/2l_64s_500b_0na_0rtg_0nnb_0.99g_0.001lr.jpg#center"
         alt="2l_64s_500b_0na_0rtg_0nnb_0.99g_0.001lr"/> <figcaption>
            <p><em>Policy update using at least 500 timesteps.</em></p>
        </figcaption>
</figure>

<p>There are still inconsistencies around higher rewards. Using a batch size of 1000 gives us a smoother curve. These results were observed without using discounted returns. Next, we&rsquo;ll change our objective function to use causality and discounted returns.</p>
<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/2l_64s_1000b_0na_0rtg_0nnb_0.99g_0.001lr.jpg#center"
         alt="2l_64s_1000b_0na_0rtg_0nnb_0.99g_0.001lr"/> <figcaption>
            <p><em>Policy update using at least 1000 timesteps.</em></p>
        </figcaption>
</figure>

<h4 id="__causality-and-reward-to-go__"><strong>Causality and reward-to-go</strong></h4>
<p>In the objective function used above, log probabilities of all taken actions are multiplied by sum of rewards. But policy at timestep $t&rsquo;$ cannot affect reward at timestep $t$ when $t &lt; t&rsquo;$. So we modify the objective function to:</p>
<p>$$\tilde{J}(\theta) \approx \frac{1}{N}\sum_{i=1}^{N} \bigg(\sum_{t=1}^{T}\log\pi_\theta(a_{it}\vert s_{it})\bigg)\bigg(\sum_{tâ=t}^{T} r(a_{itâ}\vert s_{itâ})\bigg)\tag{5}\label{eq:5}$$</p>
<p>Also, rewards received much later in future should have lesser contribution to returns than rewards received in near future. So, we use discounted returns to incorporate this dynamic behaviour.</p>
<p>$$\tilde{J}(\theta) \approx \frac{1}{N}\sum_{i=1}^{N} \bigg(\sum_{t=1}^{T}\log\pi_\theta(a_{it}\vert s_{it})\bigg)\bigg(\sum_{tâ=t}^{T} \gamma^{tâ-t} r(a_{itâ}\vert s_{itâ})\bigg)\tag{6}\label{eq:6}$$</p>
<p>On using causality and reward-to-go, our policy learns faster and reaches the maximum of average returns in fewer timesteps.</p>
<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/rtg_nortg_1.jpg#center"
         alt="rtg_nortg_1"/> <figcaption>
            <p><em>Reward-to-go (yellow) vs no reward-to-go (blue) using at least 1 timestep.</em></p>
        </figcaption>
</figure>

<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/rtg_nortg_500.jpg#center"
         alt="rtg_nortg_500"/> <figcaption>
            <p><em>Reward-to-go (yellow) vs no reward-to-go (blue) using at least 500 timestep.</em></p>
        </figcaption>
</figure>

<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/rtg_nortg_1000.jpg#center"
         alt="rtg_nortg_1000"/> <figcaption>
            <p><em>Reward-to-go (yellow) vs no reward-to-go (blue) using at least 1000 timestep.</em></p>
        </figcaption>
</figure>

<h4 id="__baselines__"><strong>Baselines</strong></h4>
<p>A popular variation of the objective function to reduce variance of gradient function is to subtract a baseline from the returns. A common baseline to subtract is state-value function and the resulting value is called advantage.</p>
<p>$$\tilde{J}(\theta) \approx \frac {1}{N} \sum_{i=1}^{N} \bigg[ \bigg( \sum_{t=1}^{T} \log\pi_\theta(a_t \vert s_t) \bigg) \bigg(\sum_{t&rsquo;=t}^{T}r(a_{it}, s_{it}) - b\bigg) \bigg]\tag{7}\label{eq:7}$$</p>
<p>We now optimize \eqref{eq:7} using a neural network baseline</p>
<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/nnb_nonnb_1.jpg#center"
         alt="nnb_nonnb_1"/> <figcaption>
            <p><em>Baseline (yellow) vs no baseline (blue) using at least 1 timestep.</em></p>
        </figcaption>
</figure>

<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/nnb_nonnb_500.jpg#center"
         alt="nnb_nonnb_500"/> <figcaption>
            <p><em>Baseline (yellow) vs no baseline (blue) using at least 500 timestep.</em></p>
        </figcaption>
</figure>

<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/nnb_nonnb_1000.jpg#center"
         alt="nnb_nonnb_1000"/> <figcaption>
            <p><em>Baseline (yellow) vs no baseline (blue) using at least 1000 timestep.</em></p>
        </figcaption>
</figure>

<p>Training plots show that baseline method works better for large batch sizes. It does not seem to work with small batch sizes (or when our batch consists of only one episosde).</p>
<h4 id="__advantage-normalization__"><strong>Advantage normalization</strong></h4>
<p>Another trick to make policy gradients work is normalizing returns or advantage (in case of baselines). Following are the results of normalizing returns, baselines were not used in this case.</p>
<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/na_nona_1.jpg#center"
         alt="na_nona_1"/> <figcaption>
            <p><em>Normalization (yellow) vs no normalization (blue) using at least 1 timestep.</em></p>
        </figcaption>
</figure>

<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/na_nona_500.jpg#center"
         alt="na_nona_500"/> <figcaption>
            <p><em>Normalization (yellow) vs no normalization (blue) using at least 500 timestep.</em></p>
        </figcaption>
</figure>

<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/na_nona_1000.jpg#center"
         alt="na_nona_1000"/> <figcaption>
            <p><em>Normalization (yellow) vs no normalization (blue) using at least 1000 timestep.</em></p>
        </figcaption>
</figure>

<h4 id="__final-result__"><strong>Final result</strong></h4>
<p>This time we use everything we have in our toolset - causality, reward-to-go, baselines and advantage normalization.</p>
<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_sum/final.jpg#center"
         alt="final"/> <figcaption>
            <p><em>Using causality, reward-to-go, baselines and advantage normalization.</em></p>
        </figcaption>
</figure>

<p>You can see that our small batch size is performing poorly due to added baseline.</p>
<p>Is there a fix to make baseline work with smaller batches? So far, we have used the objective function of the form</p>
<p>$$\tilde{J}(\theta) \approx \frac {1}{N} \sum_{i=1}^{N} \big[ \big( \sum_{t=1}^{T} \log\pi_\theta(a_t \vert s_t) \big) \sum_{t}r(a_{t}, s_{t}) \big]$$</p>
<p>which can be thought of as an average of returns over sampled trajectories. We can instead use average of returns over all timesteps i.e.</p>
<p>$$\tilde{J}(\theta) \approx \frac {1}{\tilde{T}} \sum_{i=1}^{N} \bigg[ \bigg( \sum_{t=1}^{T} \log\pi_\theta(a_t \vert s_t) \bigg) \sum_{t}r(a_{t}, s_{t}) \bigg]\tag{8}\label{eq:8}$$</p>
<p>where $\tilde{T}$ is total timesteps in a batch. Optimizing \eqref{eq:8} fixes the baseline inconsistency for small batches.</p>
<figure class="align-center ">
    <img loading="lazy" src="/2019-06-05-training-policy-gradients/loss_mean/final.jpg#center"
         alt="final_mean"/> <figcaption>
            <p><em>Using average of returns over all timesteps.</em></p>
        </figcaption>
</figure>

<h3 id="__references__"><strong>References</strong></h3>
<ol>
<li><a href="http:////rail.eecs.berkeley.edu/deeprlcourse/">Berkeley Deep RL Course</a></li>
<li><a href="https://lilianweng.github.io/lil-log/2018/04/08/policy-gradient-algorithms.html">Policy Gradient Algorithms</a></li>
<li><a href="https://danieltakeshi.github.io/2017/03/28/going-deeper-into-reinforcement-learning-fundamentals-of-policy-gradients/">Going Deeper Into Reinforcement Learning: Fundamentals of Policy Gradients</a></li>
</ol>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
